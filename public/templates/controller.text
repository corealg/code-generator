<?php

namespace App\Http\Controllers;

use App\[MODEL_NAME];
use App\Services\[SERVICE_NAME];
use Illuminate\Http\Request;
use [SAVE_VALIDATOR_NAMESPACE];
use [UPDATE_VALIDATOR_NAMESPACE];

class [CONTROLLER_NAME] extends Controller
{
    protected $[SERVICE_VARIABLE_NAME];

    public function __construct()
    {
        $this->[SERVICE_VARIABLE_NAME] = new [SERVICE_NAME]();
    }

    public function index(Request $request)
    {
        $this->authorize('list', [MODEL_NAME]::class);

        $data = $request->all();
        $[MODEL_VARIABLE_NAME_PLURAL] = $this->[SERVICE_VARIABLE_NAME]->lists($data);

        $search = $request->search;

        return view("[VIEW_DIRECTORY].list", compact(["[MODEL_VARIABLE_NAME_PLURAL]", "search"]));
    }

    public function create()
    {
        $this->authorize('create', [MODEL_NAME]::class);

        return view("[VIEW_DIRECTORY].create");
    }

    public function edit([MODEL_NAME] $[MODEL_VARIABLE_NAME_SINGULAR])
    {
        $this->authorize('edit', $[MODEL_VARIABLE_NAME_SINGULAR]);

        return view("[VIEW_DIRECTORY].edit", compact(["[MODEL_VARIABLE_NAME_SINGULAR]"]));
    }

    public function store([SAVE_FORM_REQUEST] $request)
    {
        $this->authorize('create', [MODEL_NAME]::class);

        $validatedData = $request->validated();

        $[MODEL_VARIABLE_NAME_SINGULAR] = $this->[SERVICE_VARIABLE_NAME]->updateOrCreate($validatedData);

        if(is_null($[MODEL_VARIABLE_NAME_SINGULAR]) === false){
            $message = message("[MODEL_NAME] has been successfully created.");
        }else{
            $message = message("[MODEL_NAME] has not created.", "error");
        }

        session()->flash("message", $message);
        return redirect()->back();
    }

    public function update([UPDATE_FORM_REQUEST] $request, [MODEL_NAME] $[MODEL_VARIABLE_NAME_SINGULAR])
    {
        $this->authorize('edit', $[MODEL_VARIABLE_NAME_SINGULAR]);

        $validatedData = $request->validated();

        $[MODEL_VARIABLE_NAME_SINGULAR] = $this->[SERVICE_VARIABLE_NAME]->updateOrCreate($validatedData);

        if(is_null($[MODEL_VARIABLE_NAME_SINGULAR]) === false){
            $message = message("[MODEL_NAME] has been successfully updated.");
        }else{
            $message = message("[MODEL_NAME] has not updated.", "error");
        }

        session()->flash("message", $message);
        return redirect()->back();
    }
    
    public function show([MODEL_NAME] $[MODEL_VARIABLE_NAME_SINGULAR])
    {
        $this->authorize('show', $[MODEL_VARIABLE_NAME_SINGULAR]);

        return view("[VIEW_DIRECTORY].view", compact(["[MODEL_VARIABLE_NAME_SINGULAR]"]));
    }

    public function destroy([MODEL_NAME] $[MODEL_VARIABLE_NAME_SINGULAR])
    {
        $this->authorize('delete', $[MODEL_VARIABLE_NAME_SINGULAR]);

        $[MODEL_VARIABLE_NAME_SINGULAR]->delete();
        
        $message = message("[MODEL_NAME] has been successfully deleted.");

        session()->flash("message", $message);
        return redirect()->back();
    }
}
